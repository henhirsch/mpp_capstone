all_installations_map <- plot_usmap() +
geom_sf(
data = transformed_data,
aes(size = total_sponsors, color = service_branch),
alpha = 0.60
) +
labs(title = "Active Duty Personnel on U.S. Military Installations",
caption = installations_wrapped_caption) +
scale_color_manual(values = c("Navy" = "blue",
"Army" = "green",
"Marine Corps" = "red",
"Air Force" = "orange",
"DoD" = "purple"),
name = "Service Branch") +
scale_size_continuous(labels = comma,
name = "Installation Headcount") +
theme(plot.title = element_text(hjust = 0, size = 25),
legend.position = "left",
legend.direction = "vertical",
legend.box = "vertical",
legend.justification = "right",
legend.spacing = unit(0.5, "cm"),
legend.margin = margin(r = -120),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10),
legend.key.size = unit(1, "lines"),
plot.margin = margin(20, 20, 20, 20))
all_installations_map
# export map
ggsave(here("output", "all_installations_map.jpg"), plot = all_installations_map, width = 12, height = 9, dpi = 300)
# create small installations data frame
small_installations <- transformed_data[transformed_data$headcount_below_2000 == "Yes", ]
# plot map
small_installations_map <- plot_usmap() +
geom_sf(
data = small_installations,
aes(size = total_sponsors, color = service_branch),
alpha = 0.60
) +
labs(title = "Active Duty Personnel on Small* U.S. Military Installations",
subtitle = "* Small installations are defined as those with headcounts below 2,000.",
caption = installations_wrapped_caption) +
scale_color_manual(values = c("Navy" = "blue",
"Army" = "green",
"Marine Corps" = "red",
"Air Force" = "orange",
"DoD" = "purple"),
name = "Service Branch") +
scale_size_continuous(labels = comma,
name = "Installation Headcount") +
theme(plot.title = element_text(hjust = 0, size = 25),
legend.position = "left",
legend.direction = "vertical",
legend.box = "vertical",
legend.justification = "right",
legend.spacing = unit(0.5, "cm"),
legend.margin = margin(r = -120),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10),
legend.key.size = unit(1, "lines"),
plot.margin = margin(20, 20, 20, 20))
small_installations_map
# export map
ggsave(here("output", "small_installations_map.jpg"), plot = small_installations_map, width = 12, height = 9, dpi = 300)
# rename columns
colnames(median_rent0) <- c("fips", "county", "median_contract_rent", "margin", "X")
# remove first row
median_rent1 <- median_rent0[-1, ]
# remove unneeded columns
median_rent1 <- subset(median_rent1, select = -c(margin, X))
# turn geo_id into county fips codes
median_rent1$fips <- substr(median_rent1$fips, nchar(median_rent1$fips) - 4, nchar(median_rent1$fips))
# remove rows with null values for median_gross_rent
median_rent1 <- median_rent1[median_rent1$median_contract_rent != "null", ]
# convert median_contract_rent column to numeric
median_rent1$median_contract_rent <- as.numeric(median_rent1$median_contract_rent)
# plot rent map
rent_map <- plot_usmap(regions = "counties", data = median_rent1, values = "median_contract_rent", labels = FALSE) +
labs(title = "Median Contract Rent by County (2022)",
subtitle = "The American Community Survey define contract rent as the monthly rent agreed to or contracted for, regardless of any furnishings, utilities, fees, meals, or services that may be included.") +
scale_fill_continuous(low = "white", high = "red", name = "Median Monthly Rent ($)", label = scales::comma) +
theme(panel.background=element_blank(),
legend.position = "right")
rent_map
# export map
ggsave(here("output", "rent_map.jpg"), plot = rent_map, width = 12, height = 9, dpi = 300)
library(here)
library(tidyverse)
library(readxl)
library(usmap)
library(scales)
knitr::opts_chunk$set(echo = TRUE)
# set location of this file in project directory
i_am("code/capstone_graphics.Rmd")
# point to datasets
data_file1 = "data/DMDC_Website_Location_Report_2312_clean.xlsx"
data_file2 = "data/nccs.csv"
data_file3 = "data/test_data.xlsx"
data_file4 = "data/installation_chapels.xlsx"
data_file5 = "data/installation_military_family_support_centers.xlsx"
data_file6 = "data/installation_morale_welfare_recreation.xlsx"
data_file7 = "data/installation_personal_financial_management_services.xlsx"
data_file8 = "data/median_contract_rent_county_2022.csv"
# load data using here
headcount0 <- read_excel(here(data_file1))
nccs0 <- read.csv(here(data_file2))
test_data0 <- read_excel(here(data_file3))
chapels0 <- read_excel(here(data_file4))
support_centers0 <- read_excel(here(data_file5))
mwr0 <- read_excel(here(data_file6))
financial_services0 <- read_excel(here(data_file7))
median_rent0 <- read.csv(here(data_file8))
state_headcounts <- headcount0[c(1:4, 7:53), 1:8]
colnames(state_headcounts) <- c("state", "army", "naval", "marines", "air", "space", "coast", "active_duty_total")
us_map_headcount <- plot_usmap(regions = "states", data = state_headcounts, values = "active_duty_total", labels = FALSE) +
labs(title = "Active Duty Personnel in the United States",
subtitle = "Would per capita be more helpful?") +
scale_fill_continuous(low = "white", high = "#454B1B", name = "Number of Personnel", label = scales::comma) +
theme(panel.background=element_blank(),
legend.position = "right")
us_map_headcount
# nccs1 <- nccs0[ , c("Year", "EIN", "NAME", "ASSETS", "INCOME", "CASSETS", "CTOTREV")]
# nccs2 <- nccs1[nccs1$NAME != "WOUNDED WARRIOR PROJECT INC", , drop = FALSE]
#
# nccs2 <- nccs2 %>%
#   mutate(NAME = factor(NAME,
#                         levels = c("ARMED SERVICES YMCA OF THE USA",
#                                    "NAVY-MARINE CORPS RELIEF SOCIETY",
#                                    "AIR FORCE AID SOCIETY INC",
#                                    "FIRST COMMAND EDUCATIONAL FOUNDATION",
#                                    "SAC FOUNDATION",
#                                    "AMERICAN WARRIOR ASSOCIATION"),
#                         labels = c("Armed Services YMCA of the USA",
#                                    "Navy-Marine Corps Relief Society",
#                                    "Air Force Aid Society Inc.",
#                                    "First Command Educational Foundation",
#                                    "SAC Foundation",
#                                    "American Warrior Association")))
#
# line1 <- ggplot(data = nccs2, aes(x = Year, y = INCOME, color = NAME)) +
#   geom_line() +
#   labs(x = "Year", y = "Assets") +
#   ggtitle("Assets Over Time")
# create copy of initial data frame
test_data1 <- test_data0
# make service_branch a factor variable
test_data1$service_branch <- as.factor(test_data1$service_branch)
# add column showing whether headcount is >= 2000
test_data1 <- test_data1 %>%
mutate(headcount_below_2000 = ifelse(total_sponsors < 2000, "Yes", "No"))
# create latitude and longitude columns from coordinates column
coordinates_split <- strsplit(as.character(test_data1$coordinates), ", ")
latitude <- sapply(coordinates_split, `[`, 1)
longitude <- sapply(coordinates_split, `[`, 2)
test_data1$latitude <- latitude
test_data1$longitude <- longitude
# change order of columns
test_data1 <- test_data1[, c("state", "base", "service_branch", "zip_code", "coordinates", "longitude", "latitude", "nmc", "miles_to_nmc", "headcount_below_2000", "total_sponsors", "total_spouses", "children0-5", "children6-11", "children12-18", "children19andup", "other_dependents", "total_personnel")]
# remove rows where base = Other
test_data2 <- test_data1[test_data1$base != "Other", ]
# remove rows where service_branch = DoD?
# make latitude and longitude columns numeric
# test_data2$latitude <- as.numeric(test_data2$latitude)
# test_data2$longitude <- as.numeric(test_data2$longitude)
# set number of decimal points equal to 6
test_data2$latitude <- format(test_data2$latitude, nsmall = 6)
test_data2$longitude <- format(test_data2$longitude, nsmall = 6)
# make latitude and longitude columns numeric
test_data2$latitude <- as.numeric(test_data2$latitude)
test_data2$longitude <- as.numeric(test_data2$longitude)
# transform values
transformed_data <- usmap_transform(test_data2, input_names = c("longitude", "latitude"), output_names = NULL)
# set caption text
installations_caption_text <- paste("Source: The Department of Defense's 2019 Demographics Report. No newer data on military installation headcounts is available. The Department of Defense stopped publishing disaggregated headcount data after 2019.")
# set wrapped caption width
installations_wrapped_caption <- paste(strwrap(installations_caption_text, width = 78), collapse = "\n")
# plot map
all_installations_map <- plot_usmap() +
geom_sf(
data = transformed_data,
aes(size = total_sponsors, color = service_branch),
alpha = 0.60
) +
labs(title = "Active Duty Personnel on U.S. Military Installations",
caption = installations_wrapped_caption) +
scale_color_manual(values = c("Navy" = "blue",
"Army" = "green",
"Marine Corps" = "red",
"Air Force" = "orange",
"DoD" = "purple"),
name = "Service Branch") +
scale_size_continuous(labels = comma,
name = "Installation Headcount") +
theme(plot.title = element_text(hjust = 0, size = 25),
legend.position = "left",
legend.direction = "vertical",
legend.box = "vertical",
legend.justification = "right",
legend.spacing = unit(0.5, "cm"),
legend.margin = margin(r = -120),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10),
legend.key.size = unit(1, "lines"),
plot.margin = margin(20, 20, 20, 20))
all_installations_map
# export map
ggsave(here("output", "all_installations_map.jpg"), plot = all_installations_map, width = 12, height = 9, dpi = 300)
# create small installations data frame
small_installations <- transformed_data[transformed_data$headcount_below_2000 == "Yes", ]
# plot map
small_installations_map <- plot_usmap() +
geom_sf(
data = small_installations,
aes(size = total_sponsors, color = service_branch),
alpha = 0.60
) +
labs(title = "Active Duty Personnel on Small* U.S. Military Installations",
subtitle = "* Small installations are defined as those with headcounts below 2,000.",
caption = installations_wrapped_caption) +
scale_color_manual(values = c("Navy" = "blue",
"Army" = "green",
"Marine Corps" = "red",
"Air Force" = "orange",
"DoD" = "purple"),
name = "Service Branch") +
scale_size_continuous(labels = comma,
name = "Installation Headcount") +
theme(plot.title = element_text(hjust = 0, size = 25),
legend.position = "left",
legend.direction = "vertical",
legend.box = "vertical",
legend.justification = "right",
legend.spacing = unit(0.5, "cm"),
legend.margin = margin(r = -120),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10),
legend.key.size = unit(1, "lines"),
plot.margin = margin(20, 20, 20, 20))
small_installations_map
# export map
ggsave(here("output", "small_installations_map.jpg"), plot = small_installations_map, width = 12, height = 9, dpi = 300)
# rename columns
colnames(median_rent0) <- c("fips", "county", "median_contract_rent", "margin", "X")
# remove first row
median_rent1 <- median_rent0[-1, ]
# remove unneeded columns
median_rent1 <- subset(median_rent1, select = -c(margin, X))
# turn geo_id into county fips codes
median_rent1$fips <- substr(median_rent1$fips, nchar(median_rent1$fips) - 4, nchar(median_rent1$fips))
# remove rows with null values for median_gross_rent
median_rent1 <- median_rent1[median_rent1$median_contract_rent != "null", ]
# convert median_contract_rent column to numeric
median_rent1$median_contract_rent <- as.numeric(median_rent1$median_contract_rent)
# plot rent map
rent_map <- plot_usmap(regions = "counties", data = median_rent1, values = "median_contract_rent", labels = FALSE) +
labs(title = "Median Contract Rent by County (2022)",
subtitle = "The American Community Survey define contract rent as ") +
scale_fill_continuous(low = "white", high = "red", name = "Median Monthly Rent ($)", label = scales::comma) +
theme(panel.background=element_blank(),
legend.position = "right")
rent_map
# export map
ggsave(here("output", "rent_map.jpg"), plot = rent_map, width = 12, height = 9, dpi = 300)
# rename columns
colnames(median_rent0) <- c("fips", "county", "median_contract_rent", "margin", "X")
# remove first row
median_rent1 <- median_rent0[-1, ]
# remove unneeded columns
median_rent1 <- subset(median_rent1, select = -c(margin, X))
# turn geo_id into county fips codes
median_rent1$fips <- substr(median_rent1$fips, nchar(median_rent1$fips) - 4, nchar(median_rent1$fips))
# remove rows with null values for median_gross_rent
median_rent1 <- median_rent1[median_rent1$median_contract_rent != "null", ]
# convert median_contract_rent column to numeric
median_rent1$median_contract_rent <- as.numeric(median_rent1$median_contract_rent)
# plot rent map
rent_map <- plot_usmap(regions = "counties", data = median_rent1, values = "median_contract_rent", labels = FALSE) +
labs(title = "Median Contract Rent by County (2022)",
subtitle = "The American Community Survey define contract rent as the monthly rent agreed to or contracted for, regardless of any furnishings, utilities, fees, meals, or services that may be included. ") +
scale_fill_continuous(low = "white", high = "red", name = "Median Monthly Rent ($)", label = scales::comma) +
theme(panel.background=element_blank(),
legend.position = "right")
rent_map
# export map
ggsave(here("output", "rent_map.jpg"), plot = rent_map, width = 12, height = 9, dpi = 300)
# rename columns
colnames(median_rent0) <- c("fips", "county", "median_contract_rent", "margin", "X")
# remove first row
median_rent1 <- median_rent0[-1, ]
# remove unneeded columns
median_rent1 <- subset(median_rent1, select = -c(margin, X))
# turn geo_id into county fips codes
median_rent1$fips <- substr(median_rent1$fips, nchar(median_rent1$fips) - 4, nchar(median_rent1$fips))
# remove rows with null values for median_gross_rent
median_rent1 <- median_rent1[median_rent1$median_contract_rent != "null", ]
# convert median_contract_rent column to numeric
median_rent1$median_contract_rent <- as.numeric(median_rent1$median_contract_rent)
# plot rent map
rent_map <- plot_usmap(regions = "counties", data = median_rent1, values = "median_contract_rent", labels = FALSE) +
labs(title = "Median Contract Rent by County (2022)",
subtitle = "The American Community Survey define contract rent as the monthly rent agreed to or contracted for, /n regardless of any furnishings, utilities, fees, meals, or services that may be included. ") +
scale_fill_continuous(low = "white", high = "red", name = "Median Monthly Rent ($)", label = scales::comma) +
theme(panel.background=element_blank(),
legend.position = "right")
rent_map
# export map
ggsave(here("output", "rent_map.jpg"), plot = rent_map, width = 12, height = 9, dpi = 300)
rm(list=ls())
library(here)
library(tidyverse)
library(readxl)
library(usmap)
library(scales)
knitr::opts_chunk$set(echo = TRUE)
# set location of this file in project directory
i_am("code/capstone_graphics.Rmd")
# point to datasets
data_file1 = "data/DMDC_Website_Location_Report_2312_clean.xlsx"
data_file2 = "data/installation_data.xlsx"
data_file3 = "data/median_contract_rent_county_2022.csv"
# load data using here
headcount0 <- read_excel(here(data_file1))
master_data0 <- read_excel(here(data_file2), sheet = "Master Data Set (2019)")
median_rent0 <- read.csv(here(data_file3))
demos_2019_0<- read_excel(here(data_file2), sheet = "State Demos (2019)")
demos_2022_0<- read_excel(here(data_file2), sheet = "State Demos (2022)")
state_headcounts <- headcount0[c(1:4, 7:53), 1:8]
colnames(state_headcounts) <- c("state", "army", "naval", "marines", "air", "space", "coast", "active_duty_total")
us_map_headcount <- plot_usmap(regions = "states", data = state_headcounts, values = "active_duty_total", labels = FALSE) +
labs(title = "Active Duty Personnel in the United States",
subtitle = "Would per capita be more helpful?") +
scale_fill_continuous(low = "white", high = "#454B1B", name = "Number of Personnel", label = scales::comma) +
theme(panel.background=element_blank(),
legend.position = "right")
us_map_headcount
# create copy of initial data frame
master_data1 <- master_data0
# make service_branch a factor variable
master_data1$service_branch <- as.factor(master_data1$service_branch)
# add column showing whether headcount is >= 2000
master_data1 <- master_data1 %>%
mutate(headcount_below_2000 = ifelse(total_sponsors < 2000, "Yes", "No"))
# create latitude and longitude columns from coordinates column
coordinates_split <- strsplit(as.character(master_data1$coordinates), ", ")
latitude <- sapply(coordinates_split, `[`, 1)
longitude <- sapply(coordinates_split, `[`, 2)
master_data1$latitude <- latitude
master_data1$longitude <- longitude
# change order of columns
master_data1 <- master_data1[, c("state", "base", "service_branch", "zip_code", "coordinates", "longitude", "latitude", "nmc", "miles_to_nmc", "headcount_below_2000", "total_sponsors", "total_spouses", "children0-5", "children6-11", "children12-18", "children19andup", "other_dependents", "total_personnel")]
# remove rows where base = Other
master_data2 <- master_data1[master_data1$base != "Other", ]
# remove rows where service_branch = DOD?
# make latitude and longitude columns numeric
# master_data2$latitude <- as.numeric(master_data2$latitude)
# master_data2$longitude <- as.numeric(master_data2$longitude)
# set number of decimal points equal to 6
master_data2$latitude <- format(master_data2$latitude, nsmall = 6)
master_data2$longitude <- format(master_data2$longitude, nsmall = 6)
# make latitude and longitude columns numeric
master_data2$latitude <- as.numeric(master_data2$latitude)
master_data2$longitude <- as.numeric(master_data2$longitude)
# transform values
transformed_data <- usmap_transform(master_data2, input_names = c("longitude", "latitude"), output_names = NULL)
# set caption text
installations_caption_text <- paste("Source: The Department of Defense's 2019 Demographics Report. No newer data on military installation headcounts is available. The Department of Defense stopped publishing disaggregated headcount data after 2019.")
# set wrapped caption width
installations_wrapped_caption <- paste(strwrap(installations_caption_text, width = 78), collapse = "\n")
# plot map
all_installations_map <- plot_usmap() +
geom_sf(
data = transformed_data,
aes(size = total_sponsors, color = service_branch),
alpha = 0.60
) +
labs(title = "Active Duty Personnel on U.S. Military Installations (2019)",
caption = installations_wrapped_caption) +
scale_color_manual(values = c("Navy" = "blue",
"Army" = "green",
"Marine Corps" = "red",
"Air Force" = "orange",
"DOD" = "purple"),
name = "Service Branch") +
scale_size_continuous(labels = comma,
name = "Installation Headcount") +
theme(plot.title = element_text(hjust = 0, size = 25),
legend.position = "left",
legend.direction = "vertical",
legend.box = "vertical",
legend.justification = "right",
legend.spacing = unit(0.5, "cm"),
legend.margin = margin(r = -120),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10),
legend.key.size = unit(1, "lines"),
plot.margin = margin(20, 20, 20, 20))
all_installations_map
# export map
ggsave(here("output", "all_installations_map.jpg"), plot = all_installations_map, width = 12, height = 9, dpi = 300)
# create small installations data frame
small_installations <- transformed_data[transformed_data$headcount_below_2000 == "Yes", ]
# plot map
small_installations_map <- plot_usmap() +
geom_sf(
data = small_installations,
aes(size = total_sponsors, color = service_branch),
alpha = 0.60
) +
labs(title = "Active Duty Personnel on Small U.S. Military Installations (2019)",
subtitle = "Small installations are defined as those with headcounts below 2,000.",
caption = installations_wrapped_caption) +
scale_color_manual(values = c("Navy" = "blue",
"Army" = "green",
"Marine Corps" = "red",
"Air Force" = "orange",
"DOD" = "purple"),
name = "Service Branch") +
scale_size_continuous(labels = comma,
name = "Installation Headcount") +
theme(plot.title = element_text(hjust = 0, size = 25),
legend.position = "left",
legend.direction = "vertical",
legend.box = "vertical",
legend.justification = "right",
legend.spacing = unit(0.5, "cm"),
legend.margin = margin(r = -120),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10),
legend.key.size = unit(1, "lines"),
plot.margin = margin(20, 20, 20, 20))
small_installations_map
# export map
ggsave(here("output", "small_installations_map.jpg"), plot = small_installations_map, width = 12, height = 9, dpi = 300)
# rename columns
colnames(median_rent0) <- c("fips", "county", "median_contract_rent", "margin", "X")
# remove first row
median_rent1 <- median_rent0[-1, ]
# remove null rows
median_rent1 <- median_rent1[median_rent1$margin != "**", ]
median_rent1 <- median_rent1[median_rent1$margin != "***", ]
# remove unneeded columns
median_rent1 <- subset(median_rent1, select = -c(margin, X))
# turn geo_id into county fips codes
median_rent1$fips <- substr(median_rent1$fips, nchar(median_rent1$fips) - 4, nchar(median_rent1$fips))
# convert median_contract_rent column to numeric
median_rent1$median_contract_rent <- as.numeric(median_rent1$median_contract_rent)
# set subtitle
rent_subtitle_text <- "The American Community Survey defines contract rent as the monthly rent agreed to or contracted for, regardless of any furnishings, utilities, fees, meals, or services that may be included."
wrapped_rent_subtitle <- str_wrap(rent_subtitle_text, width = 100)
# set caption
rent_caption_text <- paste("Source: The U.S. Census Bureau's American Community Survey, 5-Year Data (2009-2022)")
# set wrapped caption width
rent_wrapped_caption <- paste(strwrap(rent_caption_text, width = 45), collapse = "\n")
# plot rent map
rent_map <- plot_usmap(regions = "counties", data = median_rent1, values = "median_contract_rent", labels = FALSE) +
labs(title = "Median Contract Rent by County (2022)",
subtitle = wrapped_rent_subtitle,
caption = rent_wrapped_caption) +
scale_fill_continuous(low = "white", high = "red", name = "Median Contract Rent", label = scales::dollar_format()) +
theme(plot.title = element_text(hjust = 0, size = 25),
legend.position = "left",
legend.direction = "vertical",
legend.box = "vertical",
legend.justification = "right",
legend.spacing = unit(0.5, "cm"),
legend.margin = margin(r = -130),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10),
legend.key.size = unit(1, "lines"),
plot.margin = margin(20, 20, 20, 20))
rent_map
# export map
ggsave(here("output", "rent_map.jpg"), plot = rent_map, width = 12, height = 9, dpi = 300)
# create duplicate data frames
demos_2019_1 <- demos_2019_0
demos_2022_1 <- demos_2022_0
# add years to column names for both data frames
colnames(demos_2019_1) <- c("state", "total_sponsors_2019", "total_spouses_2019", "children0-5_2019", "children6-11_2019", "children12-18_2019", "children19-22_2019", "adult_dependents_2019", "total_dependents_2019", "total_personnel_2019")
colnames(demos_2022_1) <- c("state", "total_sponsors_2022", "total_spouses_2022", "children0-5_2022", "children6-11_2022", "children12-18_2022", "children19-22_2022", "adult_dependents_2022", "total_dependents_2022", "total_personnel_2022")
# create total_children columns
demos_2019_1$total_children_2019 <- rowSums(demos_2019_1[, c("children0-5_2019", "children6-11_2019", "children12-18_2019", "children19-22_2019")], na.rm = TRUE)
demos_2022_1$total_children_2022 <- rowSums(demos_2022_1[, c("children0-5_2022", "children6-11_2022", "children12-18_2022", "children19-22_2022")], na.rm = TRUE)
# merge both data frames
demos_change <- merge(demos_2019_1, demos_2022_1, by = "state", all = TRUE)
# create state abbreviation column
state_abbreviations <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
demos_change <- cbind(demos_change[, 1], state_abbreviations, demos_change[, -1])
# fix column names
colnames(demos_change) <- c("state", "state_abbr", "total_sponsors_2019", "total_spouses_2019", "children0-5_2019", "children6-11_2019", "children12-18_2019", "children19-22_2019", "adult_dependents_2019", "total_dependents_2019", "total_personnel_2019", "total_children_2019", "total_sponsors_2022", "total_spouses_2022", "children0-5_2022", "children6-11_2022", "children12-18_2022", "children19-22_2022", "adult_dependents_2022", "total_dependents_2022", "total_personnel_2022", "total_children_2022")
# create change columns
demos_change$change_total_sponsors <- demos_change$total_sponsors_2022 - demos_change$total_sponsors_2019
demos_change$change_total_spouses <- demos_change$total_spouses_2022 - demos_change$total_spouses_2019
demos_change$change_total_children <- demos_change$total_children_2022 - demos_change$total_children_2019
demos_change$change_total_adult_dependents <- demos_change$adult_dependents_2022 - demos_change$adult_dependents_2019
demos_change$change_total_dependents <- demos_change$total_dependents_2022 - demos_change$total_dependents_2019
demos_change$change_total_personnel <- demos_change$total_personnel_2022 - demos_change$total_personnel_2019
# create only changes demographic data frame
only_demos_change <- demos_change[, c("state_abbr", "change_total_sponsors", "change_total_spouses", "change_total_children", "change_total_adult_dependents", "change_total_dependents", "change_total_personnel")]
# create long data frame
only_demos_change_long <- pivot_longer(only_demos_change,
cols = c(change_total_sponsors, change_total_spouses, change_total_children, change_total_adult_dependents, change_total_dependents, change_total_personnel),
names_to = "demo_group",
values_to = "change_amount")
demo_change_plot <- ggplot(only_demos_change_long, aes(fill = demo_group, y = change_amount, x = state_abbr)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Change in Personnel by State (2019 - 2022)") +
labs(fill = "Demographic Group") +
ylab("Change in Personnel") +
xlab("State")
demo_change_plot
# export bar plot
ggsave(here("output", "demo_change_bar.jpg"), plot = demo_change_plot, width = 12, height = 9, dpi = 300)
